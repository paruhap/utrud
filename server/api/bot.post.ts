import { Telegraf } from 'telegraf';
import { defineEventHandler } from 'h3'; // –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import type { Context } from 'telegraf';
import { processMessage } from '../utils/aibot';

const config = useRuntimeConfig()
const BOT_TOKEN = config.telegramToken;
const CHAT_ID = config.telegramChatId;
const OFFICE_ADDRESS = '–≥. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, —É–ª. –Æ–º–∞—à–µ–≤–∞, –¥. 4–í';
const STAFF_USERNAME = config.telegramUserName;

const bot = new Telegraf(BOT_TOKEN);

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
const userStates = new Map<number, { command: string; step?: string; name?: string; phone?: string }>();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìù –ó–∞–ø–∏—Å—å –Ω–∞ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', callback_data: 'online' }],
      [{ text: 'üè¢ –ó–∞–ø–∏—Å—å –Ω–∞ –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', callback_data: 'offline' }],
      [{ text: '‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã / üìç –ê–¥—Ä–µ—Å', callback_data: 'office' }]
    ]
  }
};

const WELCOME_MESSAGE = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã
–Ø –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¢—Ä—É–¥–æ–≤–æ–≥–æ —é—Ä–∏—Å—Ç–∞ –†—è–±–æ–≤–æ–π –ï–≤–≥–µ–Ω–∏–∏ –ò–≥–æ—Ä–µ–≤–Ω—ã
–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
üè¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
üìç –£–∑–Ω–∞—Ç—å –Ω–∞—à –∞–¥—Ä–µ—Å –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã

–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å —é—Ä–∏—Å—Ç–æ–º->

–ß–∞—Ç —Å —é—Ä–∏—Å—Ç–æ–º: https://t.me/${STAFF_USERNAME}`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
const askDateTime = async (ctx: Context, type: String) => {
  await ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è', callback_data: `select_${type}` }]
        ]
      }
    }
  );
};

const getAvailableHours = () => {
  const hours = [];
  for (let i = 9; i <= 20; i++) {
    hours.push(`${i}:00`);
  }
  return hours;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('my_chat_member', async (ctx) => {
  try {
    await ctx.reply(WELCOME_MESSAGE, mainMenu);
  } catch (error) {
    console.error('Error in my_chat_member handler:', error);
  }
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
  if (!ctx.message && !ctx.callbackQuery) {
    await ctx.reply(WELCOME_MESSAGE, mainMenu);
    return;
  }
  await next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  try {
    const [, command] = ctx.message.text.split(' ');

    if (command) {
      if (command === 'office') {
        await ctx.reply(`üìç –ê–¥—Ä–µ—Å: ${OFFICE_ADDRESS}\n‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: c 10-00 –¥–æ 18-00`);
        return;
      }

      if (command === 'online' || command === 'offline') {
        userStates.set(ctx.from.id, { command });
        await askDateTime(ctx, command);
        return;
      }
    }

    // –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await ctx.reply(WELCOME_MESSAGE, mainMenu);
  } catch (error) {
    console.error('Error in start command:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.command(['online', 'offline', 'office'], async (ctx) => {
  try {
    const command = ctx.message.text.substring(1);
    
    if (command === 'office') {
      await ctx.reply(`üìç –ê–¥—Ä–µ—Å: ${OFFICE_ADDRESS}\n‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: c 10-00 –¥–æ 18-00`);
      return;
    }

    if (command === 'online' || command === 'offline') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ "name"
      userStates.set(ctx.from.id, { command: command, step: 'name' });
      await ctx.reply('–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?');
      return;
    }
  } catch (error) {
    console.error('Error in command handler:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
bot.action(['online', 'offline', 'office'], async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const data = ctx.callbackQuery?.data;
    if (!data) return;

    if (data === 'office') {
      await ctx.reply(`üìç –ê–¥—Ä–µ—Å: ${OFFICE_ADDRESS}\n‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: c 10-00 –¥–æ 18-00`);
      return;
    }

    if (data === 'online' || data === 'offline') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      userStates.set(ctx.from.id, { command: data, step: 'name' });

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
      await ctx.reply('–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?');
      return;
    }
  } catch (error) {
    console.error('Error in button handler:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const state = userStates.get(userId);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (state) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
      if (state.step === 'name') {
        state.name = ctx.message.text;
        state.step = 'phone';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (state.step === 'phone') {
        state.phone = ctx.message.text;
        state.step = 'datetime';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        const date = new Date();
        date.setDate(date.getDate() + 1);

        const keyboard = [];
        for (let i = 0; i < 10; i++) {
          const currentDate = new Date(date);
          currentDate.setDate(date.getDate() + i);
          if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
            keyboard.push([{
              text: currentDate.toLocaleDateString('ru-RU'),
              callback_data: `day_${state.command}_${currentDate.toISOString().split('T')[0]}`
            }]);
          }
        }

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:', {
          reply_markup: { inline_keyboard: keyboard }
        });
        return;
      }
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const userMessage = ctx.message.text;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await ctx.sendChatAction('typing');

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    const response = await processMessage(userMessage);
    
    if (response.success) {
      await ctx.reply(response.message);
    } else {
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

  } catch (error) {
    console.error('Error in text handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
bot.action(/^time_/, async (ctx) => {
  try {
    if (!ctx.callbackQuery?.data) return;
    const data = ctx.callbackQuery.data;
    const [, type, date, time] = data.split('_');
    const formattedDate = new Date(date).toLocaleDateString('ru-RU');

    const state = userStates.get(ctx.from.id);
    const userName = state.name;
    const userPhone = state.phone;

    if (type === 'online') {
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.');
      await bot.telegram.sendMessage(
        CHAT_ID,
        `üì± –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\nüë§ –ò–º—è: ${userName}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userPhone}\nüìÖ –î–∞—Ç–∞: ${formattedDate}\nüïí –í—Ä–µ–º—è: ${time}`
      );
    } else {
      await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ñ–¥–µ–º –≤–∞—Å ${formattedDate} –≤ ${time} –ø–æ –∞–¥—Ä–µ—Å—É: ${OFFICE_ADDRESS}`);
      await bot.telegram.sendMessage(
        CHAT_ID,
        `üë• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\nüë§ –ò–º—è: ${userName}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${userPhone}\nüìÖ –î–∞—Ç–∞: ${formattedDate}\nüïí –í—Ä–µ–º—è: ${time}`
      );
    }

    userStates.delete(ctx.from.id);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenu);
  } catch (error) {
    console.error('Error in time selection:', error);
  }
});

bot.action(/^calendar_/, async (ctx) => {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    const data = ctx.callbackQuery.data;
    const [, type] = data.split('_');
    const date = new Date();
    date.setDate(date.getDate() + 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

    const keyboard = [];
    for (let i = 0; i < 10; i++) {
      const currentDate = new Date(date);
      currentDate.setDate(date.getDate() + i);
      if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        keyboard.push([{
          text: currentDate.toLocaleDateString('ru-RU'),
          callback_data: `day_${type}_${currentDate.toISOString().split('T')[0]}`
        }]);
      }
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏):', {
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    console.error('Error in calendar:', error);
  }
});

bot.action(/^day_/, async (ctx) => {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;
    const data = ctx.callbackQuery.data;
    const [, type, date] = data.split('_');
    const hours = getAvailableHours();
    const keyboard = hours.map(hour => [{
      text: hour,
      callback_data: `time_${type}_${date}_${hour}`
    }]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', {
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    console.error('Error in day selection:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((error: any) => {
  console.error('Bot error:', error.message);
});

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event);
    await bot.handleUpdate(body);
    return { ok: true };
  } catch (error: any) {
    console.error('Webhook handler error:', error.message);
    return {
      ok: false,
      error: error.message
    };
  }
});