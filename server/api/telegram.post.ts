import db from '../database/database';

const config = useRuntimeConfig()
const BOT_TOKEN = config.telegramToken;
const CHAT_ID = config.telegramChatId;

export default defineEventHandler(async (event) => {
  const body = await readBody(event);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.name || !body.phone) {
      throw createError({
        statusCode: 400,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const stmt = db.prepare(`
      INSERT INTO leads (name, phone, status)
      VALUES (?, ?, '–ù–æ–≤–∞—è')
    `);
    
    stmt.run(body.name, body.phone);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const messageText = encodeURIComponent(`üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!
üë§ –ò–º—è: ${body.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${body.phone}
${body.service ? `üíº –£—Å–ª—É–≥–∞: ${body.service}` : ''}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${CHAT_ID}&text=${messageText}`;
    const response = await fetch(telegramUrl);

    if (!response.ok) {
      console.error('Telegram API Response:', await response.text());
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
    }

    return { success: true };
  } catch (error) {
    console.error('Error:', error);
    throw createError({
      statusCode: 400,
      message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏'
    });
  }
});
